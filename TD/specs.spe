with Building do
    // Propriétés universelles
    dead := any_s - src(any_t - self_epsilon);
    notResettable := any_s - coreach(initial, any_t);
    /* Safety properties
     *  A property P
     *  P : if "A" then "B"
     *  Compute notP as
     *  A - B
     *  A & ~Building
     *  ~B - ~A
     */

    /* P1 : When a button is pushed, it light up.
     * P1 : if "a button is pushed" then "it lights up"
     */
     A_ex := label floors[0].button.push;   // label : all transitions
     B_ex := [floors[0].button.lit];        // [] : all configurations where the expression is true in the states
     notP1_ex := (tgt(A_ex) - B_ex);        // tgt : configuration after a transition
     // This should be 0
     // Now full formula for all buttons :
     notP1 := (tgt(label floors[0].button.push) - [floors[0].button.lit])|
                (tgt(label floors[1].button.push) - [floors[1].button.lit])|
                (tgt(label floors[2].button.push) - [floors[2].button.lit])|
                (tgt(label floors[3].button.push) - [floors[3].button.lit])|
              (tgt(label lift.buttons[0].push) - [lift.buttons[0].lit])|
                (tgt(label lift.buttons[1].push) - [lift.buttons[1].lit])|
                (tgt(label lift.buttons[2].push) - [lift.buttons[2].lit])|
                (tgt(label lift.buttons[3].push) - [lift.buttons[3].lit]); 

    /* P2 : When the corresponding service is done, it lights off.
     * P2 : if "doot is closed" then "buttons light off"
     */ 
     notP2 := (tgt(label floors[0].door.close) - [~lift.buttons[0].lit] - [~floors[0].button.lit])|
                (tgt(label floors[1].door.close) - [~lift.buttons[1].lit] - [~floors[1].button.lit])|
                (tgt(label floors[2].door.close) - [~lift.buttons[2].lit] - [~floors[2].button.lit])|
                (tgt(label floors[3].door.close) - [~lift.buttons[3].lit] - [~floors[3].button.lit]);
done