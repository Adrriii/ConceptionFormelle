with BuildingV0 do
    // Propriétés universelles
    dead := any_s - src(any_t - self_epsilon);
    notResettable := any_s - coreach(initial, any_t);
    /* Safety properties
     *  A property P
     *  P : if "A" then "B"
     *  Compute notP as
     *  A - B
     *  A & ~Building
     *  ~B - ~A
     */

    /* P1 : When a button is pushed, it light up.
     * P1 : if "a button is pushed" then "it lights up"
     */
     A_ex := label floors[0].button.push;   // label : all transitions
     B_ex := [floors[0].button.lit];        // [] : all configurations where the expression is true in the states
     notP1_ex := (tgt(A_ex) - B_ex);        // tgt : configuration after a transition
     // This should be 0
     // Now full formula for all buttons :
     notP1 := (tgt(label floors[0].button.push) - [floors[0].button.lit])|
                (tgt(label floors[1].button.push) - [floors[1].button.lit])|
                (tgt(label floors[2].button.push) - [floors[2].button.lit])|
                (tgt(label floors[3].button.push) - [floors[3].button.lit])|
              (tgt(label lift.buttons[0].push) - [lift.buttons[0].lit])|
                (tgt(label lift.buttons[1].push) - [lift.buttons[1].lit])|
                (tgt(label lift.buttons[2].push) - [lift.buttons[2].lit])|
                (tgt(label lift.buttons[3].push) - [lift.buttons[3].lit]); 

    /* P2 : When the corresponding service is done, it lights off.
     * P2 : if "doot is closed" then "buttons light off"
     */ 
     notP2 := (tgt(label floors[0].door.close) - [~lift.buttons[0].lit] - [~floors[0].button.lit])|
                (tgt(label floors[1].door.close) - [~lift.buttons[1].lit] - [~floors[1].button.lit])|
                (tgt(label floors[2].door.close) - [~lift.buttons[2].lit] - [~floors[2].button.lit])|
                (tgt(label floors[3].door.close) - [~lift.buttons[3].lit] - [~floors[3].button.lit]);

    /* P3 : On each floor, the door must remain closed if the lift is not there.
     * P3 : if "lift not at this floor" then "floor door is closed"
     * Intersection with any_s : changing intial state might change the result !
     */
     notP3 := any_s & 
            (([~(lift.currentFloor=0)] - [~floors[0].door.opened])|
                ([~(lift.currentFloor=1)] - [~floors[1].door.opened])|
                ([~(lift.currentFloor=2)] - [~floors[2].door.opened])|
                ([~(lift.currentFloor=3)] - [~floors[3].door.opened]));

    /* P5 : The software opens the door at some floor only if there is some requests for that floor.
     * P5 : if "floor door opens" then "floor request is true"
     */
     notP5 := (src(label floors[0].door.open) - [request[0]])|
                (src(label floors[1].door.open) - [request[1]])|
                (src(label floors[2].door.open) - [request[2]])|
                (src(label floors[3].door.open) - [request[3]]);       // src : configurations before a transition

    /* P6 : If there is no request, the lift must stay at the same floor
     * P6 : if "all requests are false" then "up and down not possible"
     */
     notP6 := any_s & (src(label up) - src(label down) - [request[0] |request[1] |request[2] |request[3]]);

    /* P7 : When the lift moves, it must stop where there is a request
     * P7 : if "live moves to a request" then "it must not move while there is a request"
     */
     notP7 := any_s & ([request[0] & lift.currentFloor = 0] & src(label down | label up) |
              [request[1] & lift.currentFloor = 1] & src(label down | label up) |
              [request[2] & lift.currentFloor = 2] & src(label down | label up) |
              [request[3] & lift.currentFloor = 3] & src(label down | label up));

          // Vérifier graphiquement : Séléctionner Building, Graph : dot-trace(initial, any_t, notP7) Puis executer les instructions dans le simulateur
done

with BuildingV1 do
    // V0 Conditions
    dead := any_s - src(any_t - self_epsilon);
    notResettable := any_s - coreach(initial, any_t);
     A_ex := label floors[0].button.push;   // label : all transitions
     B_ex := [floors[0].button.lit];        // [] : all configurations where the expression is true in the states
     notP1_ex := (tgt(A_ex) - B_ex);        // tgt : configuration after a transition
     notP1 := (tgt(label floors[0].button.push) - [floors[0].button.lit])|
                (tgt(label floors[1].button.push) - [floors[1].button.lit])|
                (tgt(label floors[2].button.push) - [floors[2].button.lit])|
                (tgt(label floors[3].button.push) - [floors[3].button.lit])|
              (tgt(label lift.buttons[0].push) - [lift.buttons[0].lit])|
                (tgt(label lift.buttons[1].push) - [lift.buttons[1].lit])|
                (tgt(label lift.buttons[2].push) - [lift.buttons[2].lit])|
                (tgt(label lift.buttons[3].push) - [lift.buttons[3].lit]);
     notP2 := (tgt(label floors[0].door.close) - [~lift.buttons[0].lit] - [~floors[0].button.lit])|
                (tgt(label floors[1].door.close) - [~lift.buttons[1].lit] - [~floors[1].button.lit])|
                (tgt(label floors[2].door.close) - [~lift.buttons[2].lit] - [~floors[2].button.lit])|
                (tgt(label floors[3].door.close) - [~lift.buttons[3].lit] - [~floors[3].button.lit]);
     notP3 := any_s & 
            (([~(lift.currentFloor=0)] - [~floors[0].door.opened])|
                ([~(lift.currentFloor=1)] - [~floors[1].door.opened])|
                ([~(lift.currentFloor=2)] - [~floors[2].door.opened])|
                ([~(lift.currentFloor=3)] - [~floors[3].door.opened]));
     notP5 := (src(label floors[0].door.open) - [request[0]])|
                (src(label floors[1].door.open) - [request[1]])|
                (src(label floors[2].door.open) - [request[2]])|
                (src(label floors[3].door.open) - [request[3]]);
     notP6 := any_s & (src(label up) - src(label down) - [request[0] |request[1] |request[2] |request[3]]);
     notP7 := any_s & ([request[0] & lift.currentFloor = 0] & src(label down | label up) |
              [request[1] & lift.currentFloor = 1] & src(label down | label up) |
              [request[2] & lift.currentFloor = 2] & src(label down | label up) |
              [request[3] & lift.currentFloor = 3] & src(label down | label up));

    /* P8 : When there are several requests, the software must (if necessary) continue in the same direction than it's last move
     * P8 : if "moved in a direction" and "a request is in this direction" then "it must go in this direction again"
     */

      notP8 := any_s & ((reach(tgt(label up), any_t - (label up | label down)) & src(label down) & src(label up)) | 
                (reach(tgt(label down), any_t - (label up | label down)) & src(label down) & src(label up)));
done

with Building do
    // V0 Conditions
    dead := any_s - src(any_t - self_epsilon);
    notResettable := any_s - coreach(initial, any_t);
     A_ex := label floors[0].button.push;   // label : all transitions
     B_ex := [floors[0].button.lit];        // [] : all configurations where the expression is true in the states
     notP1_ex := (tgt(A_ex) - B_ex);        // tgt : configuration after a transition
     notP1 := (tgt(label floors[0].button.push) - [floors[0].button.lit])|
                (tgt(label floors[1].button.push) - [floors[1].button.lit])|
                (tgt(label floors[2].button.push) - [floors[2].button.lit])|
                (tgt(label floors[3].button.push) - [floors[3].button.lit])|
              (tgt(label lift.buttons[0].push) - [lift.buttons[0].lit])|
                (tgt(label lift.buttons[1].push) - [lift.buttons[1].lit])|
                (tgt(label lift.buttons[2].push) - [lift.buttons[2].lit])|
                (tgt(label lift.buttons[3].push) - [lift.buttons[3].lit]);
     notP2 := (tgt(label floors[0].door.close) - [~lift.buttons[0].lit] - [~floors[0].button.lit])|
                (tgt(label floors[1].door.close) - [~lift.buttons[1].lit] - [~floors[1].button.lit])|
                (tgt(label floors[2].door.close) - [~lift.buttons[2].lit] - [~floors[2].button.lit])|
                (tgt(label floors[3].door.close) - [~lift.buttons[3].lit] - [~floors[3].button.lit]);
     notP3 := any_s & 
            (([~(lift.currentFloor=0)] - [~floors[0].door.opened])|
                ([~(lift.currentFloor=1)] - [~floors[1].door.opened])|
                ([~(lift.currentFloor=2)] - [~floors[2].door.opened])|
                ([~(lift.currentFloor=3)] - [~floors[3].door.opened]));
     notP5 := (src(label floors[0].door.open) - [request[0]])|
                (src(label floors[1].door.open) - [request[1]])|
                (src(label floors[2].door.open) - [request[2]])|
                (src(label floors[3].door.open) - [request[3]]);
     notP6 := any_s & (src(label up) - src(label down) - [request[0] |request[1] |request[2] |request[3]]);
     notP7 := any_s & ([request[0] & lift.currentFloor = 0] & src(label down | label up) |
              [request[1] & lift.currentFloor = 1] & src(label down | label up) |
              [request[2] & lift.currentFloor = 2] & src(label down | label up) |
              [request[3] & lift.currentFloor = 3] & src(label down | label up));
    // V1 Conditions
     notP8 := any_s & ((reach(tgt(label up), any_t - (label up | label down)) & src(label down) & src(label up)) | 
              (reach(tgt(label down), any_t - (label up | label down)) & src(label down) & src(label up)));
done