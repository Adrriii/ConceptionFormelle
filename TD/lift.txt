const nbFloors : integer = 4;

node Button
    state
        lit : bool;
    init
        lit := false;
    event
        push; 
        off;
    trans
        true |- push -> lit := true;
        true |- off -> lit := false;
edon

node Door
    state
        opened : bool : public;
    init
        opened := false;
    event
        open; 
        close;
    trans
        true |- open -> opened := true;
        true |- close -> opened := false;
edon

node Lift
    sub
        door : Door;
        buttons : Button[nbFloors];
    state    
        currentFloor : [0,nbFloors-1];
    init
        currentFloor := 0;
    event
        open; 
        close[nbFloors];
        down;
        up;
    trans 
        door.opened & currentFloor=0 |- close[0] -> ;
        door.opened & currentFloor=1 |- close[1] -> ;
        door.opened & currentFloor=2 |- close[2] -> ;
        door.opened & currentFloor=3 |- close[3] -> ;
        ~door.opened |- open -> ;
        ~door.opened |- down -> currentFloor := currentFloor - 1;
        ~door.opened |- up -> currentFloor := currentFloor + 1;
    sync
        <close[0], buttons[0].off , door.close>;
        <close[1], buttons[1].off , door.close>;
        <close[2], buttons[2].off , door.close>;
        <close[3], buttons[3].off , door.close>;
        <open, door.open>;
edon

node Floor
    sub
        button : Button;
        door : Door;
    event
        close, open;
    trans 
        door.opened |- close -> ;
        ~door.opened |- open -> ;
    sync
        <close, button.off, door.close>;
        <open, door.open>;
edon

node Building
    sub
        floors : Floor[nbFloors];
        lift : Lift;
edon